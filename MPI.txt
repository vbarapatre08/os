QQQQQQ. Write an MPI program to calculate sum of randomly generated 1000 numbers
(stored in array) on a cluster

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 1000

int main(int argc, char** argv) {
    int rank, size;
    int local_sum = 0;
    int global_sum = 0;
    int numbers[N];
    int i;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        srand(time(NULL));
        for (i = 0; i < N; i++) {
            numbers[i] = rand() % 100;
        }
    }

    MPI_Bcast(numbers, N, MPI_INT, 0, MPI_COMM_WORLD);

    for (i = rank; i < N; i += size) {
        local_sum += numbers[i];
    }

    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Sum: %d\n", global_sum);
    }

    MPI_Finalize();
    return 0;
}


QQQQQQ. Write an MPI program to calculate sum and average of randomly generated 1000
numbers (stored in array) on a cluster

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 1000

int main(int argc, char** argv) {
    int rank, size;
    int local_sum = 0;
    int global_sum = 0;
    double global_avg = 0.0;
    int numbers[N];
    int i;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        srand(time(NULL));
        for (i = 0; i < N; i++) {
            numbers[i] = rand() % 100;
        }
    }

    MPI_Bcast(numbers, N, MPI_INT, 0, MPI_COMM_WORLD);

    for (i = rank; i < N; i += size) {
        local_sum += numbers[i];
    }

    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        global_avg = (double)global_sum / N;
        printf("Sum: %d\n", global_sum);
        printf("Average: %f\n", global_avg);
    }

    MPI_Finalize();
    return 0;
}


QQQQQQ. Write an MPI program to find the max number from randomly generated 1000 numbers
(stored in array) on a cluster (Hint: Use MPI_Reduce)

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 1000

int main(int argc, char** argv) {
    int rank, size;
    int local_max = 0;
    int global_max = 0;
    int numbers[N];
    int i;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        srand(time(NULL));
        for (i = 0; i < N; i++) {
            numbers[i] = rand() % 100;
        }
    }

    MPI_Bcast(numbers, N, MPI_INT, 0, MPI_COMM_WORLD);

    for (i = rank; i < N; i += size) {
        if (numbers[i] > local_max) {
            local_max = numbers[i];
        }
    }

    MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Max: %d\n", global_max);
    }

    MPI_Finalize();
    return 0;
}


QQQQQQ. Write an MPI program to find the min number from randomly generated 1000 numbers
(stored in array) on a cluster (Hint: Use MPI_Reduce) 

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 1000

int main(int argc, char** argv) {
    int rank, size;
    int local_min = 100;
    int global_min = 100;
    int numbers[N];
    int i;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        srand(time(NULL));
        for (i = 0; i < N; i++) {
            numbers[i] = rand() % 100;
        }
    }

    MPI_Bcast(numbers, N, MPI_INT, 0, MPI_COMM_WORLD);

    for (i = rank; i < N; i += size) {
        if (numbers[i] < local_min) {
            local_min = numbers[i];
        }
    }

    MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Min: %d\n", global_min);
    }

    MPI_Finalize();
    return 0;
}


QQQQQQ. Write an MPI program to calculate sum of all even randomly generated 1000
numbers (stored in array) on a cluster

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 1000

int main(int argc, char** argv) {
    int rank, size;
    int local_sum = 0;
    int global_sum = 0;
    int numbers[N];
    int i;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        srand(time(NULL));
        for (i = 0; i < N; i++) {
            numbers[i] = rand() % 100;
        }
    }

    MPI_Bcast(numbers, N, MPI_INT, 0, MPI_COMM_WORLD);

    for (i = rank; i < N; i += size) {
        if (numbers[i] % 2 == 0) {
            local_sum += numbers[i];
        }
    }

    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Sum of even numbers: %d\n", global_sum);
    }

    MPI_Finalize();
    return 0;
}



QQQQQQ.  Write an MPI program to calculate sum of all odd randomly generated 1000 numbers
(stored in array) on a cluster.

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 1000

int main(int argc, char** argv) {
    int rank, size;
    int local_sum = 0;
    int global_sum = 0;
    int numbers[N];
    int i;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        srand(time(NULL));
        for (i = 0; i < N; i++) {
            numbers[i] = rand() % 100;
        }
    }

    MPI_Bcast(numbers, N, MPI_INT, 0, MPI_COMM_WORLD);

    for (i = rank; i < N; i += size) {
        if (numbers[i] % 2 != 0) {
            local_sum += numbers[i];
        }
    }

    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Sum of odd numbers: %d\n", global_sum);
    }

    MPI_Finalize();
    return 0;
}



