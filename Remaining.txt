Q. Write a C Menu driven Program to implement following functionality
a) Accept Available
b) Display Allocation, Max
c) Display the contents of need matrix
d) Display Available

#include<stdio.h>
int nop,nor,A[10][10],M[10][10],Av[10],N[10][10],finish[10];
void acceptdata(int x[10][10])
{
 int i,j; 
 for(i=0;i<nop;i++)
 {
printf("P%d\n",i);
 for(j=0;j<nor;j++)
{
 printf("%c: ",65+j);
 scanf("%d",&x[i][j]);
}
 }
}
void acceptav()
{
 int i;
 for(i=0;i<nor;i++)
 {
 printf("%c: ",65+i);
 scanf("%d",&Av[i]);
 }
}
void calcneed()
{
 int i,j;
 for(i=0;i<nop;i++)
 for(j=0;j<nor;j++)
 N[i][j]=M[i][j]-A[i][j];
}
void displaydata()
{
int i,j;
printf("\n\tAllocation \t\tMax\t\tNeed\n\t");
for(i=0;i<3;i++)
{
for(j=0;j<nor;j++)
printf("%4c",65+j);
printf("\t");
}
for(i=0;i<nop;i++)
{
printf("\nP%d\t",i);
for(j=0;j<nor;j++)
printf("%4d",A[i][j]);
printf("\t");
for(j=0;j<nor;j++)
printf("%4d",M[i][j]);
printf("\t");
for(j=0;j<nor;j++)
printf("%4d",N[i][j]);
}
printf("\navailable");
for(i=0;i<nor;i++)
printf("%4d",Av[i]);
}
int checkneed(int pno)
{
int i;
for(i=0;i<nor;i++)
if(N[pno][i]>Av[i])
return 0;
return 1;
}
main()
{
 printf("\nEnter No of Processes: ");
 scanf("%d",&nop);
 printf("\nEnter No. of Resources: ");
 scanf("%d",&nor);
 printf("\nEnter Allocation Matrix: ");
 acceptdata(A);
 printf("\nEnter Max Matrix: ");
 acceptdata(M);
 printf("\nEnter Availability:");
 acceptav();
 calcneed();
 displaydata();
}


Q. Write a program to simulate Linked file allocation method. Assume disk with n 
number of blocks. Give value of n as input. Randomly mark some block as allocated and 
accordingly maintain the list of free blocks Write menu driver program with menu 
options as mentioned below and implement each option.
• Show Bit Vector 
• Create New File 
• Show Directory 
• Exit

#include <stdio.h>
#include <stdlib.h>
int main(){
 int f[50], p, i, st, len, j, c, k, a;
 for (i = 0; i < 50; i++)
 f[i] = 0;
 printf("Enter how many blocks already allocated: ");
 scanf("%d", &p);
 printf("Enter blocks already allocated: ");
 for (i = 0; i < p; i++) {
 scanf("%d", &a);
 f[a] = 1;
 }
x:
 printf("Enter starting block: ");
 scanf("%d",&st);
 printf("Enter length of the file: ");
 scanf("%d",&len);
 k = len;
 if (f[st] == 0)
 {
 for (j = st; j < (st + k); j++){
 if (f[j] == 0){
 f[j] = 1;
 printf("%d-------->%d\n", j, f[j]);
 }
 else{
 printf("%d Block is already allocated \n", j);
 k++;
 }
 }
 }
 else
 printf("%d starting block is already allocated \n", st);
 printf("Do you want to enter more file(Yes - 1/No - 0)");
 scanf("%d", &c);
 if (c == 1)
 goto x;
 else
 exit(0);
 return 0;
}


Q. Write a C program to simulate Banker’s algorithm for the purpose of deadlock
avoidance. Consider the following snapshot of system, A, B, C and D is the 
resource type.
a)Calculate and display the content of need matrix?
b)Is the system in safe state? If display the safe sequence.

#include<stdio.h>
int main()
{
    int n,m,i,j,k;
    n=5; // Number of processes
    m=4; // Number of resources
    int alloc[5][4] = { { 0, 0, 1, 2 }, // P0 // Allocation Matrix
                        { 1, 0, 0, 0 }, // P1
                        { 1, 3, 5, 4 }, // P2
                        { 0, 6, 3, 2 }, // P3
                        { 0, 0, 1, 4 } }; // P4

    int max[5][4] = { { 0, 0, 1, 2 }, // P0 // MAX Matrix
                      { 1, 7, 5, 0 }, // P1
                      { 2, 3, 5, 6 }, // P2
                      { 0, 6, 5, 2 }, // P3
                      { 0, 6, 5, 6 } }; // P4

    int avail[4] = {1 ,5 ,2 ,0}; // Available Resources

    int f[n],ans[n],ind=0;
    for (k=0;k<n;k++) {
        f[k] = 0;
    }
    int need[n][m];
    for (i=0;i<n;i++) {
        for (j=0;j<m;j++)
            need[i][j] = max[i][j] - alloc[i][j];
    }
    int y=0;
    for (k=0;k<5;k++)
    {
        for (i=0;i<n;i++)
        {
            if (f[i]==0)
            {

                int flag=0;
                for (j=0;j<m;j++)
                {
                    if (need[i][j]>avail[j]){
                        flag=1;
                         break;
                    }
                }

                if (flag==0)
                {
                    ans[ind++]=i;
                    for (y=0;y<m;y++)
                        avail[y]+=alloc[i][y];
                    f[i]=1;
                }
            }
        }
    }

    printf("Need Matrix:\n");
    for (i = 0 ; i < n ; i++)
    {
        for (j = 0 ; j < m ; j++)
        {
            printf("%d ",need[i][j]);
        }
        printf("\n");
    }

    printf("System is in safe state.\nSafe sequence is: ");
    for (i=0;i<n-1;i++)
        printf("P%d -> ",ans[i]);
    printf("P%d",ans[n-1]);

    return(0);
}


Q. Implement the Menu driven Banker's algorithm for accepting Allocation, Max
fromuser.
a)Accept Available
b)Display Allocation, Max
c)Find Need and display It,
d)Display Available
Consider the system with 3 resources types A,B, and C with 7,2,6 instances respectively.

#include<stdio.h>
#include<stdlib.h>

int n,m,i,j,k;
int alloc[10][10], max[10][10], avail[10], need[10][10];

void input()
{
    printf("Enter the number of processes: ");
    scanf("%d",&n);
    printf("Enter the number of resource types: ");
    scanf("%d",&m);

    printf("Enter the Allocation Matrix:\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            scanf("%d",&alloc[i][j]);
        }
    }

    printf("Enter the Max Matrix:\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            scanf("%d",&max[i][j]);
        }
    }
}

void findNeed()
{
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
}

void display(int x[][10])
{
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            printf("%d ",x[i][j]);
        }
        printf("\n");
    }
}

int main()
{
    int ch;
    while(1)
    {
        printf("\nMenu:\n1. Input\n2. Display Allocation Matrix\n3. Display Max Matrix\n4. Find Need Matrix\n5. Display Need Matrix\n6. Exit\nEnter your choice: ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: input();
                    break;
            case 2: display(alloc);
                    break;
            case 3: display(max);
                    break;
            case 4: findNeed();
                    break;
            case 5: findNeed();
                    display(need);
                    break;
            case 6: exit(0);
                    break;
            default: printf("Invalid choice!\n");
        }
    }
}


Q. Consider a system with ‘m’ processes and ‘n’ resource types. Accept number of 
instances for every resource type. For each process accept the allocation and maximum 
requirement matrices. Write a program to display the contents of need matrix and to 
check if the given request of a process can be granted immediately or not.

#include<stdio.h>
int nop,nor,Rprocess,A[10][10],M[10][10],Av[10],N[10][10],R[10],finish[10];
void acceptdata(int x[10][10])
{
int i,j; 
for(i=0;i<nop;i++)
{
printf("P%d\n",i);
for(j=0;j<nor;j++)
{
printf("%c: ",65+j);
scanf("%d",&x[i][j]);
}
}
}
void acceptav()
{
int i;
for(i=0;i<nor;i++)
{
printf("%c: ",65+i);
scanf("%d",&Av[i]);
}
}
void acceptrequest()
{
int i;
printf("\nEnter the Process for which request has arrived :P");
scanf("%d",&Rprocess); 
printf("\nEnter the request for process: ");
for(i=0;i<nor;i++)
{
printf("%c: ",65+i);
scanf("%d",&R[i]);
}
}
void calcneed()
{
int i,j;
for(i=0;i<nop;i++)
for(j=0;j<nor;j++)
N[i][j]=M[i][j]-A[i][j];
}
void displaydata()
{
int i,j;
printf("\n\tAllocation \t\tMax\t\tNeed\n\t");
for(i=0;i<3;i++)
{
for(j=0;j<nor;j++)
printf("%4c",65+j);
printf("\t");
}
for(i=0;i<nop;i++)
{
printf("\nP%d\t",i);
for(j=0;j<nor;j++)
printf("%4d",A[i][j]);
printf("\t");
for(j=0;j<nor;j++)
printf("%4d",M[i][j]);
printf("\t");
for(j=0;j<nor;j++)
printf("%4d",N[i][j]);
}
printf("\navailable");
for(i=0;i<nor;i++)
printf("%4d",Av[i]);
}
int checkneed(int pno)
{
int i;
for(i=0;i<nor;i++)
if(N[pno][i]>Av[i])
return 0;
return 1;
}
void resourcerequest()
{
int i;
for(i=0;i<nor;i++)
{
if(R[i]>N[Rprocess][i])
break; 
}
if(i==nor)
{
for(i=0;i<nor;i++)
{ 
if(R[i]>Av[i])
break;
}
}
if(i==nor)
{ 
printf("\nRequest<=Need \n Request<=Available \n Both 
Condition are true");
printf("\nThen system Pretends to fulfill request , then 
modify resourse allocation state");
for(i=0;i<nor;i++)
{
Av[i]=Av[i]-R[i];
A[Rprocess][i]=A[Rprocess][i]+R[i];
N[Rprocess][i]=N[Rprocess][i]-R[i];
}
displaydata();
}
else
{
printf("\nRequest<=Need \n Request<=Available \n Condition is 
not true");
printf("\nSo request cannot be satisfied!");
}
}
main()
{
printf("\nEnter No of Processes: ");
scanf("%d",&nop);
printf("\nEnter No. of Resources: ");
scanf("%d",&nor);
printf("\nEnter Allocation Matrix: ");
acceptdata(A);
printf("\nEnter Max Matrix: ");
acceptdata(M);
printf("\nEnter Availability:");
acceptav();
calcneed();
displaydata();
acceptrequest();
resourcerequest(); 
banker();
}


Q. Write a program to simulate Contiguous file allocation method. Assume disk with n 
number of blocks. Give value of n as input. Randomly mark some block as allocated and 
accordingly maintain the list of free blocks Write menu driver program with menu 
options as mentioned above and implement each option.
• Show Bit Vector 
• Create New File 
• Show Directory 
• Exit

#include <stdio.h>
#include <stdlib.h>
void contiguous(int files[])
{
 int flag = 0, startBlock, len, j, k, ch;
 char fname[20]; 
 printf("\nEnter Name of File: ");
 scanf("%s",&fname);
 printf("Enter the starting block of the files: ");
 scanf("%d", &startBlock);
 printf("Enter the length of the files: ");
 scanf("%d", &len);
 for (j = startBlock; j < (startBlock + len); j++)
 {
 if (files[j] == 0)
 flag++;
 }
 if (len == flag)
 {
 for (k = startBlock; k < (startBlock + len); k++)
 {
 if (files[k] == 0)
 {
 files[k] = 1;
 printf("%d\t%d\n", k, files[k]);
 }
 }
 if (k != (startBlock + len - 1))
 printf("The file is allocated to the disk\n");
 }
 else
 printf("The file is not allocated to the disk\n");
 printf("Do you want to enter more files?\n");
 printf("Press 1 for YES, 0 for NO: ");
 scanf("%d", &ch);
 if (ch == 1)
 contiguous(files);
 else
 exit(0);
 return;
}
main()
{
 int i,files[50];
 for (i = 0; i < 50; i++)
 files[i] = 0;
 printf("Files Allocated are :\n");
 contiguous(files);
 return 0;
}


Q. Write a C program to simulate Banker’s algorithm for the purpose of
deadlock avoidance. the following snapshot of system, A, B, C and D are the 
resource type.
Implement the following Menu.
a) Accept Available 
b) Display Allocation, Max 
c) Display the contents of need matrix 
d) Display Available

#include<stdio.h>
int nop,nor,A[10][10],M[10][10],Av[10],N[10][10],finish[10];
void acceptdata(int x[10][10])
{
 int i,j; 
 for(i=0;i<nop;i++)
 {
printf("P%d\n",i);
 for(j=0;j<nor;j++)
{
 printf("%c: ",65+j);
 scanf("%d",&x[i][j]);
}
 }
}
void acceptav()
{
 int i;
 for(i=0;i<nor;i++)
 {
 printf("%c: ",65+i);
 scanf("%d",&Av[i]);
 }
}
void calcneed()
{
 int i,j;
 for(i=0;i<nop;i++)
 for(j=0;j<nor;j++)
 N[i][j]=M[i][j]-A[i][j];
}
void displaydata()
{
int i,j;
printf("\n\tAllocation \t\tMax\t\tNeed\n\t");
for(i=0;i<3;i++)
{
for(j=0;j<nor;j++)
printf("%4c",65+j);
printf("\t");
}
for(i=0;i<nop;i++)
{
printf("\nP%d\t",i);
for(j=0;j<nor;j++)
printf("%4d",A[i][j]);
printf("\t");
for(j=0;j<nor;j++)
printf("%4d",M[i][j]);
printf("\t");
for(j=0;j<nor;j++)
printf("%4d",N[i][j]);
}
printf("\navailable");
for(i=0;i<nor;i++)
printf("%4d",Av[i]);
}
int checkneed(int pno)
{
int i;
for(i=0;i<nor;i++)
if(N[pno][i]>Av[i])
return 0;
return 1;
}
void banker()
{
int p=0,j=0,k=0,flag=0,safe[10];
while(flag<2)
{
if(!finish[p])
{
printf("\n\nNeed of process P%d (,",p);
for(j=0;j<nor;j++)
printf("%d,",N[p][j]);
if(checkneed(p))
{
printf(") <= available (");
for(j=0;j<nor;j++)
printf("%d,",Av[j]);
printf(")");
printf("\nNeed is Satsified, So process P%d can be 
granted requiered resources.\n After P%d finishes, it will realease all 
the resources.",p,p);
for(j=0;j<nor;j++)
Av[j]=Av[j]+A[p][j];
printf("New Availble=");
for(j=0;j<nor;j++)
printf("%d ",Av[j]); 
finish[p]=1;
safe[k++]=p;
}
else
{
printf(") > available (");
for(j=0;j<nor;j++)
printf("%d,",Av[j]);
printf(")");
printf("\nNeed is not Satsified, So process P%d 
cannot be granted required resources.\n process P%d has to wait.",p,p);
}
}
if((p+1)%nop==0)
flag++;
p=(p+1)%nop;
}//while
 if(k==nop)
{
 printf("\nSystem is in safe state...");
 printf("\nSafe Sequence: ");
 for(j=0;j<k;j++)
 printf("P%d->",safe[j]);
 }
 else
printf("\nSystem is not in safe state....");
}
main()
{
 printf("\nEnter No of Processes: ");
 scanf("%d",&nop);
 printf("\nEnter No. of Resources: ");
 scanf("%d",&nor);
 printf("\nEnter Allocation Matrix: ");
 acceptdata(A);
 printf("\nEnter Max Matrix: ");
 acceptdata(M);
 printf("\nEnter Availability:");
 acceptav();
 calcneed();
 displaydata();
 banker();
}


Q. Write a program to simulate Sequential (Contiguous) file allocation method. 
Assume disk with n number of blocks. Give value of n as input. Randomly mark some 
block as allocated and accordingly maintain the list of free blocks Write menu driver 
program with menu options as mentioned below and implement each option.
• Show Bit Vector 
• Show Directory 
• Delete File 
• Exit

Q. #include <stdio.h>
#include <stdlib.h>
void contiguous(int files[])
{
 int flag = 0, startBlock, len, j, k, ch;
 char fname[20]; 
 printf("\nEnter Name of File: ");
 scanf("%s",&fname);
 printf("Enter the starting block of the files: ");
 scanf("%d", &startBlock);
 printf("Enter the length of the files: ");
 scanf("%d", &len);
 for (j = startBlock; j < (startBlock + len); j++)
 {
 if (files[j] == 0)
 flag++;
 }
 if (len == flag)
 {
 for (k = startBlock; k < (startBlock + len); k++)
 {
 if (files[k] == 0)
 {
 files[k] = 1;
 printf("%d\t%d\n", k, files[k]);
 }
 }
 if (k != (startBlock + len - 1))
 printf("The file is allocated to the disk\n");
 }
 else
 printf("The file is not allocated to the disk\n");
 printf("Do you want to enter more files?\n");
 printf("Press 1 for YES, 0 for NO: ");
 scanf("%d", &ch);
 if (ch == 1)
 contiguous(files);
 else
 exit(0);
 return;
}
main()
{
 int i,files[50];
 for (i = 0; i < 50; i++)
 files[i] = 0;
 printf("Files Allocated are :\n");
 contiguous(files);
 return 0;
}


Q. Write a program to simulate Indexed file allocation method. Assume disk with n 
number of blocks. Give value of n as input. Randomly mark some block as allocated and 
accordingly maintain the list of free blocks Write menu driver program with menu 
options as mentioned above and implement each option.
• Show Bit Vector 
• Show Directory 
• Delete Already File
• Exit

#include<stdio.h>
#include<stdlib.h>
main()
{
int f[50], index[50],i, n, st, len, j, c, k, ind,count=0;
for(i=0;i<50;i++)
f[i]=0;
x:printf("Enter the index block: ");
 scanf("%d",&ind);
 if(f[ind]!=1)
 {
 printf("Enter no of blocks needed for the index %d on the disk : \n", ind);
 scanf("%d",&n);
 }
 else
 {
 printf("%d index is already allocated \n",ind);
 goto x;
 }
y: count=0;
 printf("Enter blocks no for index %d on the disk : \n", ind);
 for(i=0;i<n;i++)
 {
 scanf("%d", &index[i]);
 if(f[index[i]]==0)
 count++;
 }
 if(count==n)
 {
 for(j=0;j<n;j++)
 f[index[j]]=1;
 printf("Allocated\n");
 printf("File Indexed\n");
 for(k=0;k<n;k++)
 printf("%d-------->%d : %d\n",ind,index[k],f[index[k]]);
 }
 else
 {
 printf("File in the index is already allocated \n");
 printf("Enter another file indexed");
 goto y;
 }
 printf("Do you want to enter more file(Yes - 1/No - 0)");
 scanf("%d", &c);
 if(c==1)
 goto x;
 else
 exit(0);
 getch();
}


